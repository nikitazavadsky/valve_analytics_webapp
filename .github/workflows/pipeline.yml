# This is a basic workflow to help you get started with Actions
name: Valve-Analytics-Web CI

# Controls when the workflow will run
on:
  pull_request:
    paths:
    - "**.py"
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.1-alpine
        env:
          POSTGRES_USER: vlad
          POSTGRES_PASSWORD: gasik
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Install poetry
      run: curl -sSL https://install.python-poetry.org | python3 -

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: "poetry"

    - name: Install Dependencies
      working-directory: ./valve_analytics_webapp
      run: poetry install

    - name: Codestyle check
      working-directory: ./valve_analytics_webapp
      run: poetry run pre-commit run --all-files --show-diff-on-failure

    - name: Check for model changes without migrations
      working-directory: ./valve_analytics_webapp
      run: |
        export $(cat ../.environment/ci/app) && poetry run python manage.py makemigrations --check --dry-run
        exit $?

    # - name: Test with pytest
    #   run: |
    #     poetry run pytest tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    # - name: Upload pytest test results
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: pytest-results-${{ matrix.python-version }}
    #     path: junit/test-results-${{ matrix.python-version }}.xml
    #   # Use always() to always run this step to publish test results when there are test failures
    #   if: ${{ always() }}
